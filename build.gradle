plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'net.ltgt.errorprone' version '0.0.15' apply false
    id 'io.franzbecker.gradle-lombok' version '1.14' apply false
}

apply from: 'gradle/scripts/yaml.gradle'

description = 'TripleA is a free online turn based strategy game and board game engine, similar to such board games as Axis & Allies or Risk.'

ext {
    schemasDir = file('config/triplea/schemas')
}

check {
    dependsOn 'validateYamls'
}

task validateYamls(group: 'verification', description: 'Validates YAML files.') {
    doLast {
        def lobbyServerYamlFile = file('lobby_server.yaml')
        validateYaml(lobbyServerYamlFile, file("$schemasDir/lobby_server.json"))

        def mapsYamlFile = file('triplea_maps.yaml')
        validateYaml(mapsYamlFile, file("$schemasDir/triplea_maps.json"))
        validateMapsYamlUris(mapsYamlFile)
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'io.franzbecker.gradle-lombok'

    apply from: "${rootProject.projectDir}/gradle/scripts/release.gradle"
    apply from: "${rootProject.projectDir}/gradle/scripts/remote-lib.gradle"
    apply from: "${rootProject.projectDir}/gradle/scripts/version.gradle"

    group = 'triplea'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    version = getProductVersion()

    ext {
        hamcrestVersion = '2.0.0.0'
        junitJupiterVersion = '5.3.1'
        mockitoVersion = '2.22.0'
        postgresqlVersion = '42.2.2'
        sonatypeGoodiesPrefsVersion = '2.2.5'
        xchartVersion = '3.6.1'
    }

    repositories {
        jcenter()
        maven {
            url 'https://jitpack.io'
        }
    }

    dependencies {
        errorprone 'com.google.errorprone:error_prone_core:2.3.1'

        implementation 'com.google.guava:guava:24.1-jre'

        testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.0'
        testImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation 'org.junit-pioneer:junit-pioneer:0.1.2'
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.3.1'
        testRuntimeOnly 'org.slf4j:slf4j-nop:1.7.25'
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += [
            '-Xep:ByteBufferBackingArray:ERROR',
            '-Xep:CatchAndPrintStackTrace:ERROR',
            '-Xep:ClassCanBeStatic:ERROR',
            '-Xep:DefaultCharset:ERROR',
            '-Xep:FutureReturnValueIgnored:ERROR',
            '-Xep:InconsistentCapitalization:ERROR',
            '-Xep:JdkObsolete:ERROR',
            '-Xep:MissingOverride:ERROR',
            '-Xep:MutableConstantField:ERROR',
            '-Xep:NonAtomicVolatileUpdate:ERROR',
            '-Xep:OperatorPrecedence:ERROR',
            '-Xep:ParameterName:OFF', // workaround for https://github.com/google/error-prone/issues/780
            '-Xep:ReferenceEquality:ERROR',
            '-Xep:StringSplitter:ERROR',
            '-Xep:UnsynchronizedOverridesSynchronized:ERROR',
            '-Xep:WaitNotInLoop:ERROR',
            '-Xlint:all,-processing',
            '-Xmaxwarns', '1000'
        ]
        options.encoding = 'UTF-8'
        options.incremental = true

        // workaround for https://github.com/gradle/gradle/issues/2510
        if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            options.compilerArgs += ['--release', '8']
        }
    }

    tasks.withType(Test).configureEach {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    check {
        dependsOn 'integTest'
    }

    checkstyle {
        toolVersion = "8.8"
        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        configProperties = [samedir: configFile.parent]
    }

    checkstyleMain {
        maxWarnings = 0
        source sourceSets.main.output.resourcesDir
    }

    checkstyleTest {
        maxWarnings = 0
        source sourceSets.test.output.resourcesDir
    }

    compileTestJava {
        options.compilerArgs += ['-Xep:ClassCanBeStatic:OFF']
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    lombok {
        version = '1.18.2'
        sha256 = 'f13db210efa2092a58bb7befce58ffa502e5fefc5e1099f45007074008756bc0'
    }

    test {
        useJUnitPlatform {
            excludeTags 'integration'
        }
    }

    task integTest(type: Test) {
        useJUnitPlatform {
            includeTags 'integration'
        }
    }
}
